# Generated by Django 4.0.4 on 2022-07-06 00:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('cash', models.PositiveIntegerField()),
                ('CustomerPhone', models.PositiveIntegerField(unique=True)),
                ('OtherDetails', models.TextField(blank=True, help_text='Not Required', verbose_name='Details')),
            ],
            options={
                'ordering': ('-date_joined',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Accounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('CreatedAt', models.DateTimeField(auto_now_add=True, verbose_name='Opened at')),
                ('OtherAccountDetails', models.TextField(blank=True, help_text='Not Required', verbose_name='details')),
            ],
            options={
                'ordering': ('-CreatedAt',),
            },
        ),
        migrations.CreateModel(
            name='AccountType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AccountTypeDescription', models.TextField(blank=True, help_text='Not Required', unique=True, verbose_name='description')),
            ],
        ),
        migrations.CreateModel(
            name='CustomerPurchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Date', models.DateTimeField(auto_now_add=True, verbose_name='Done at')),
                ('Quantity', models.PositiveIntegerField(error_messages={'name': {'max_length': 'The quantity must be between 0 and 99999999'}}, help_text='Maximum 99999999', verbose_name='Quantity')),
                ('OtherDetailsOfPurchase', models.TextField(blank=True, help_text='Not Required', verbose_name='Details of Purchase')),
                ('CustomersId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='CustomerTypes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('CustomerTypeDescription', models.TextField(blank=True, help_text='Not Required', verbose_name='description')),
            ],
        ),
        migrations.CreateModel(
            name='Merchant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('MerchantName', models.CharField(help_text='Required', max_length=40, unique=True, verbose_name='Merchant Name')),
                ('MerchantPhone', models.PositiveIntegerField(unique=True)),
                ('MerchantEmail', models.EmailField(max_length=40, unique=True)),
                ('OtherDetailsOfMerchant', models.TextField(blank=True, help_text='Not Required', verbose_name='Details of Merchant')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('AmountOfTransaction', models.PositiveIntegerField(error_messages={'name': {'max_length': 'The Amount must be between 0 and 99999999'}}, help_text='Maximum 99999999', verbose_name='Amount Of Transaction')),
                ('AccountId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bank.accounts')),
                ('PurchaseId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bank.customerpurchase')),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='ProductsAndServices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ProductsAndServicesDescription', models.TextField(blank=True, help_text='Required', verbose_name='description')),
                ('MerchantId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bank.merchant', verbose_name='Merchant Id')),
            ],
        ),
        migrations.AddField(
            model_name='customerpurchase',
            name='ProductsAndServicesCode',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bank.productsandservices'),
        ),
        migrations.AddField(
            model_name='accounts',
            name='AccountTypeCode',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bank.accounttype'),
        ),
        migrations.AddField(
            model_name='accounts',
            name='CustomerId',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customers',
            name='CustomerTypeCode',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='c', to='bank.customertypes', verbose_name='Customer Type Code'),
        ),
        migrations.AddField(
            model_name='customers',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customers',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
